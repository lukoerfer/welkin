@todo Prevent / warn user from loading too much data
@body There is no usability degradation control: Welkin will not stop users from loading an excessive amount of information that would make the system too slow to be responsive. We must think about ways to prevent this from happening as usability should always be good.

@todo Synchronized panes
@body All panes should work in concert. When you restrict the graph from one pane, all the others should update at the same time.

@todo Fragmentation of long literals
@body Long literals are not fragmented and flowed in nice text boxes

@todo Improve color selection
@body Hue color sliders are lame, we need to find a better method for color coding that would make it easier for users to select colors that have a cognitively similar level of contrast (see the NASA usability lab color tool for an example of that).

@todo Improve focus / zooming
@body Fish-eye focusing looks sexy but might not be that effective in real life, maybe semantic zooming/panning would be more helpful? Or combining the approaches? In case, when doing the fisheye zoom, we should make sure that things don't fall off the edge of the graph and get cropped.

@todo Type filter
@body Add the ability to filter by type

@todo Improve graph layout algorithm
@body Graph layout algorithm is a brute force n-body, with algorithmical complexity of O(n^2), with n the number of nodes. There are algorithms that achieve at least O(n*log(n)) complexity, but they require a b-tree creation. We need to investigate at how many nodes the nlog(n) algorithm starts to make sense and whether or not this is actually useful in real life due to data pollution.

@todo Support loading from URL
@body Allow models to be loaded from a URL (a web-browser-like address bar at the top would be handy) or from a SPARQL web service

@todo Provenance info in graph model
@body Add provenance info to the graph model (basically, being able to distinguish groups of nodes by where [what file, what web service] they came from).

@todo Support model / layout saving
@body Allow the current model and current layout to be saved for later reuse

@todo Clustering algorithms
@body Play with clustering algorithms as a way to simplify the graph when it contains too many nodes (Newmann-Girman is very promising, but it's algorithmical complexity may be somewhat limiting and clearly not realtime, but maybe we can reuse some of the force-repulsion simulation to perform the clustering incrementally).
